- if contribution.post.present?
  .post
    p.post_user_name
      = I18n.t("activerecord.attributes.profile.screen_name")
      = link_to "#{contribution.user.profile.screen_name}" , profile_path(contribution.user.profile.id)
    p.post_content
      = contribution.post.content
    p.post_info
      = I18n.t("activerecord.views.created_at")
      = contribution.created_at.strftime('%Y/%m/%d %H:%M')
    .comments
      div class="show_comments_#{contribution.id}"
        p.comment_starts
          = I18n.t("activerecord.models.comments")
        ul
          - contribution.comments.each do |comment|
              li.each_comment
                p.comment_user_name
                  = link_to "#{comment.user.profile.screen_name}", profile_path(comment.user.profile.id)
                p.comment_content
                  = comment.content
                p.comment_date
                  = comment.created_at.strftime('%Y/%m/%d %H:%M')
      - if user_signed_in?
        div id="comment_form"
          = render partial: 'comments/form', locals: { comment: contribution.comments.build, contribution: contribution }
    ul.post_menu
      li
        - if user_signed_in?
          div id="favorites_button_#{contribution.id}"
            - unless current_user.favorited?(contribution)
              = form_with(model: current_user.favorites.build(contribution_id: contribution.id)) do |f|
                = f.hidden_field :contribution_id, id: "contribution_id_#{contribution.id}"
                = f.submit
            - else
              = form_with(model: current_user.favorites.find_by(contribution_id: contribution.id), method: :delete ) do |f|
                = f.submit
            #favorites_count
              - if contribution.favorite_users.present?
                = link_to(show_favorited_by_favorite_path(contribution.id)) do
                  = contribution.favorite_users.count
                  = I18n.t("activerecord.views.user_liked")
              - else
                = contribution.favorite_users.count
                = I18n.t("activerecord.views.user_liked")
      - if user_signed_in? && current_user.id == contribution.user.id
        li
          = link_to I18n.t("activerecord.views.edit"), edit_post_path(contribution.post.id)
    .comments_open
      p
        | コメント：
        = contribution.comments.count
        | 件
        span#open_message
          | ▼コメントを表示
- elsif contribution.que.present?
  .que
    p.post_user_name
      = I18n.t("activerecord.attributes.profile.screen_name")
      = link_to "#{contribution.user.profile.screen_name}" , profile_path(contribution.user.profile.id)
    p.question
      | Q.
      = contribution.que.question
    .que_options
      - unless already_voted?(contribution)
        div id="que_options_#{contribution.id}"
          - contribution.que.options.each do |option|
            = link_to votes_path(contribution_id: contribution.id, option_id: option.id), method: :post, remote: true do
              p
                | #{option.option_name}
      - else
        - ranks = contribution.que.options.sort {|a,b| b.votes.count <=> a.votes.count}
        .result
          h3
            | 投票結果
          table
            - ranks.each_with_index do |rank,i|
              tr
                th
                  span.rank_number
                    = i + 1
                  span.rank_option_name
                    = rank.option_name
                  - if user_signed_in? && current_user.votes.find_by(option_id: rank.id).present?
                    span.voted_mark
                      | ★
                td
                  span.rank_votes_count
                    = rank.votes.count
                    |票
    p.post_info
      = I18n.t("activerecord.views.created_at")
      = contribution.created_at.strftime('%Y/%m/%d %H:%M')
    .comments
      div class="show_comments_#{contribution.id}"
        p.comment_starts
          = I18n.t("activerecord.models.comments")
        ul
          - contribution.comments.each do |comment|
              li.each_comment
                p.comment_user_name
                  = link_to "#{comment.user.profile.screen_name}", profile_path(comment.user.profile.id)
                p.comment_content
                  = comment.content
                p.comment_date
                  = comment.created_at.strftime('%Y/%m/%d %H:%M')
      - if user_signed_in?
        div id="comment_form"
          = render partial: 'comments/form', locals: { comment: contribution.comments.build, contribution: contribution }
    ul.post_menu
      li
        - if user_signed_in?
          div id="favorites_button_#{contribution.id}"
            - unless current_user.favorited?(contribution)
              = form_with(model: current_user.favorites.build(contribution_id: contribution.id)) do |f|
                = f.hidden_field :contribution_id, id: "contribution_id_#{contribution.id}"
                = f.submit
            - else
              = form_with(model: current_user.favorites.find_by(contribution_id: contribution.id), method: :delete ) do |f|
                = f.submit
            #favorites_count
              - if contribution.favorite_users.present?
                = link_to(show_favorited_by_favorite_path(contribution.id)) do
                  = contribution.favorite_users.count
                  = I18n.t("activerecord.views.user_liked")
              - else
                = contribution.favorite_users.count
                = I18n.t("activerecord.views.user_liked")
        - if user_signed_in? && current_user.id == contribution.user.id
          li
            = link_to I18n.t("activerecord.views.destroy"), contribution_path(contribution.id), method: :delete, data: { confirm: "queを削除しますか？"}
    .comments_open
      p
        | コメント：
        = contribution.comments.count
        | 件
        span#open_message
          | ▼コメントを表示
